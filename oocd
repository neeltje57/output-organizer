#!/bin/bash
# ==================================================================================
# /usr/local/bin/oocd
# ==================================================================================
# Change this variable to the directory where the configuration files are stored.  =
# Normally this would be: oo_confpath="/etc/oos"                                   =
# The quotes are needed in case there are spaces in the directory name.            =
oo_confpath="/home/peter/software/oo/etc/oo"
# ==================================================================================
# In oo, only valid users can run scripts. So, you can only have subdirectories
# in the base output directory which are from a valid user. The same applies to the
# etc directories. oocd checks if the directories are from valid users, and if not, 
# it will delete it, and exits with return code 1.
# Otherwise it will exits with 0.
# ===========================================================================
# Don't change anything below this line unless you know what you are doing. =
# ===========================================================================

# Load configuration file
# Get parms from system config file
if [[ -f "$oo_confpath"/oo.conf ]] ; then
  eval $(grep "^oo_logbasepath=" "$oo_confpath"/oo.conf)
fi
if [[ -z "$oo_logbasepath" \
   ]]; then
  echo "One or more mandatory variables are not set in the config file: ""$oo_confpath"/oo.conf
  echo "  oo_logbasepath          : ""$oo_logbasepath"
  echo "see documentation"
  exit 1
fi

oo_temp_logfile=$(mktemp)
oo_deleted_var_dirs=0
oo_deleted_etc_dirs=0
{
# loop through the var directories
for oocd_directory in $oo_logbasepath/*
do
  if [[ -d $oocd_directory ]]; then
    oocd_userdir=`basename "$oocd_directory"`
    if [[ -z "$(getent passwd $oocd_userdir)" ]]; then
      # delete directory of non existent user
      echo "Deleting "$oocd_directory" ..."
      (( oo_deleted_var_dirs++ ))
      rm -rf "$oocd_directory"
    fi
  fi
done

# loop through the etc directories
for oocd_directory in $oo_confpath/users.conf/*
do
  if [[ -d $oocd_directory ]]; then
    oocd_userdir=`basename "$oocd_directory"`
    if [[ -z "$(getent passwd $oocd_userdir)" ]]; then
      # delete directory of non existent user
      echo "Deleting "$oocd_directory" ..."
      (( oo_deleted_etc_dirs++ ))
      rm -rf "$oocd_directory"
    fi
  fi
done
} >$oo_temp_logfile

cat $oo_temp_logfile
rm -f $oo_temp_logfile

if [[ $oo_deleted_var_dirs -ne 0 || $oo_deleted_etc_dirs -ne 0 ]]; then
  exit 1
else
  exit 0
fi
