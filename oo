#!/bin/bash         
# ==================================================================================
# /usr/local/bin/oonew
# ==================================================================================
# Change this variable to the directory where the configurationi files are stored. =
# Normally this would be: oo_confpath="/etc/oo"                                    =
# The quotes are needed in case there are spaces in the directory name.            =
oo_confpath="/home/peter/oodev/etc/oo"
# ==================================================================================

# ===========================================================================
# Don't change anything below this line unless you know what you are doing. =
# ===========================================================================

oo_current_user=$(whoami)

# Get parms from system config file
if [[ -f "$oo_confpath"/oo.conf ]] ; then
  eval $(grep "^oo_delete_after_days_min=" "$oo_confpath"/oo.conf)
  eval $(grep "^oo_delete_after_days_max=" "$oo_confpath"/oo.conf)
  eval $(grep "^oo_logbasepath=" "$oo_confpath"/oo.conf)
fi
if [[ -z "$oo_delete_after_days_min" || \
      -z "$oo_delete_after_days_max" || \
      -z "$oo_logbasepath" \
   ]]; then
  echo "One or more mandatory variables are not set in the config file: ""$oo_confpath"/oo.conf
  echo "  oo_delete_after_days_min: ""$oo_delete_after_days_min"
  echo "  oo_delete_after_days_max: ""$oo_delete_after_days_max"
  echo "  oo_logbasepath          : ""$oo_logbasepath"
  echo "  see documentation"
  exit 1
fi

# Save scriptname, which should be the first parameter
oo_full_scriptname="$1"
oo_base_scriptname=`basename "$oo_full_scriptname"`
#
# calculate expiration days of the outputfile
# Override oo_delete_after_days with a user defined value, if a conf file exists.
if [[ -f "$oo_confpath"/users.conf/"$oo_current_user"/"$oo_base_scriptname" ]] ; then
  eval $(grep "^oo_delete_after_days=" "$oo_confpath"/users.conf/"$oo_current_user"/"$oo_base_scriptname")
fi
# Check if it is an integer, if not (user made a typo in his conf file) use minimum value.
oo_re='^[0-9]+$'
if ! [[ $oo_delete_after_days =~ $oo_re ]] ; then
  oo_delete_after_days=$oo_delete_after_days_min
fi
# Value must be between 1
if [[ "$oo_delete_after_days" -lt 1 ]] ; then
  oo_delete_after_days=$oo_delete_after_days_min
fi
# and max
if [[ "$oo_delete_after_days" -gt $oo_delete_after_days_max ]] ; then
  oo_delete_after_days=$oo_delete_after_days_max
fi
# Calculate the expiration day:
oo_expiration_date=$(date +"%Y-%m-%d" --date="-$oo_delete_after_days days ago")
#
if [[ ! -d "$oo_logbasepath" ]]; then
  echo "Output directory not created or not mounted, script will exit"
  exit 1
fi
if [[ ! -f "$oo_full_scriptname" ]] ; then
  echo "File ""$oo_full_scriptname"" does not exist"
  exit 1
fi
oo_outputdir="$oo_logbasepath"/"$oo_current_user"/"$oo_base_scriptname"
if [[ ! -d "$oo_outputdir" ]]; then
  mkdir -p "$oo_outputdir"
fi
oo_suffix=`date '+%Y-%m-%d_%H:%M:%S.%3N'`
oo_stdout="$oo_outputdir"/"$oo_base_scriptname".$oo_suffix.out
oo_temp_stderr=$(mktemp)
oo_temp_stdout=$(mktemp)

# execute the actual script
# $2 is variable $1, $3 is $2, and so on
{
/bin/bash "$oo_full_scriptname" $2 $3 $4 $5 $6 $7 $8 $9
oo_result=$?
oo_result=$(echo 000$oo_result | tail -c 4)
} >"$oo_temp_stdout" 2>"$oo_temp_stderr"

# Assemble final outputfile
{
echo "Don't change anything in this section or the file might be deleted during housekeeping."
echo "Script result code: $oo_result"
echo "Expiration date   : ""$oo_expiration_date"
echo "Execution started : $oo_suffix"
echo "script            : ""$oo_full_scriptname"
echo "User              : ""$oo_current_user"
echo "Execution ended   : `date '+%Y-%m-%d_%H:%M:%S.%3N'`"
echo "stdout            : ""$oo_stdout"
echo "temp_stdout       : $oo_temp_stdout"
echo "temp_stderr       : $oo_temp_stderr"
echo "Expiration days   : $oo_delete_after_days"
echo "Expiration (min)  : $oo_delete_after_days_min"
echo "Expiration (max)  : $oo_delete_after_days_max"
echo "variable 1        : $2"
echo "variable 2        : $3"
echo "variable 3        : $4"
echo "variable 4        : $5"
echo "variable 5        : $6"
echo "variable 6        : $7"
echo "variable 7        : $8"
echo "variable 8        : $9"
echo

echo "========== stderr below =========="
if [[ -s "$oo_temp_stderr" ]]; then
  cat "$oo_temp_stderr"
else
  echo "stderr is empty"
fi
echo "========== stderr above =========="
echo
rm -f "$oo_temp_stderr"

echo "========== script below =========="
cat "$oo_full_scriptname" 
echo "========== script above =========="
echo

echo "========== stdout below =========="
if [[ -s "$oo_temp_stdout" ]]; then
  cat "$oo_temp_stdout"
else
  echo "stdout is empty"
fi
echo "========== stdout above =========="
rm -f "$oo_temp_stdout"

} >"$oo_stdout"

exit 0
